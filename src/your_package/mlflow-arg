import argparse
import logging
import pandas as pd
import mlflow

def setup_logging(log_level, log_path, no_console_log):
    handlers = []
    if log_path:
        handlers.append(logging.FileHandler(log_path))
    if not no_console_log:
        handlers.append(logging.StreamHandler())
    logging.basicConfig(
        level=log_level,
        format="%(asctime)s %(name)s %(levelname)s %(message)s",
        handlers=handlers
    )

def ingest_data(output_path):
    logging.info("Starting data ingestion")
    mlflow.start_run(nested=True)
    mlflow.log_param("output_path", output_path)

    # Example: Downloading a dataset (replace with your actual logic)
    url = 'https://example.com/data.csv'  # Replace with actual URL or data source
    df = pd.read_csv(url)
    df.to_csv(output_path, index=False)
    mlflow.log_artifact(output_path)

    logging.info(f"Data ingested successfully and saved to {output_path}")
    mlflow.end_run()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Data ingestion script with logging')
    parser.add_argument('--output-path', type=str, help='Path to save the ingested data', required=True)
    parser.add_argument('--log-level', type=str, help='Logging level (e.g., DEBUG, INFO)', default='INFO')
    parser.add_argument('--log-path', type=str, help='Path to save log file')
    parser.add_argument('--no-console-log', action='store_true', help='Disable logging to console')
    args = parser.parse_args()

    setup_logging(args.log_level, args.log_path, args.no_console_log)
    logging.info("Starting data ingestion")
    ingest_data(args.output_path)